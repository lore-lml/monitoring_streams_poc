/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_channelwriter_free(a: number): void;
export function channelwriter_clone(a: number): number;
export function channelwriter_open(a: number): number;
export function channelwriter_send_signed_raw_data(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function channelwriter_channel_address(a: number): number;
export function channelwriter_msg_index(a: number, b: number, c: number, d: number): void;
export function __wbg_channelreader_free(a: number): void;
export function channelreader_clone(a: number): number;
export function channelreader_attach(a: number): number;
export function channelreader_fetch_raw_msgs(a: number): number;
export function channelreader_pop_msg(a: number, b: number): number;
export function channelreader_has_next_msg(a: number): number;
export function channelreader_channel_address(a: number): number;
export function channelreader_msg_index(a: number, b: number, c: number, d: number): void;
export function __wbg_responsemessage_free(a: number): void;
export function responsemessage_msg_id(a: number, b: number): void;
export function responsemessage_public(a: number, b: number): void;
export function responsemessage_masked(a: number, b: number): void;
export function __wbg_channelinfo_free(a: number): void;
export function channelinfo_new(a: number, b: number, c: number, d: number): number;
export function channelinfo_channel_id(a: number, b: number): void;
export function channelinfo_announce_id(a: number, b: number): void;
export function __wbg_keynonce_free(a: number): void;
export function keynonce_new(a: number, b: number, c: number, d: number): number;
export function keynonce_key(a: number, b: number): void;
export function keynonce_nonce(a: number, b: number): void;
export function keynonce_clone(a: number): number;
export function __wbg_channelwriterbuilder_free(a: number): void;
export function channelwriterbuilder_new(): number;
export function channelwriterbuilder_seed(a: number, b: number, c: number): number;
export function channelwriterbuilder_node(a: number, b: number, c: number): number;
export function channelwriterbuilder_encoding(a: number, b: number, c: number): number;
export function channelwriterbuilder_build(a: number): number;
export function __wbg_channelreaderbuilder_free(a: number): void;
export function channelreaderbuilder_new(): number;
export function channelreaderbuilder_seed(a: number, b: number, c: number): number;
export function channelreaderbuilder_node(a: number, b: number, c: number): number;
export function channelreaderbuilder_encoding(a: number, b: number, c: number): number;
export function channelreaderbuilder_build(a: number, b: number, c: number, d: number, e: number): number;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h22205dcaedbf07da(a: number, b: number, c: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__hf1d412c18306105a(a: number, b: number, c: number, d: number): void;
